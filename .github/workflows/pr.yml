name: PullRequest

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PR_NAME: pr-${{ github.event.pull_request.id }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: eu-north-1
  AWS_REGION: eu-north-1

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  logging:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Print stage
        run: |
          echo Stage is $PR_NAME
          echo to remove: sst remove --stage $PR_NAME
  build:
    runs-on: ubuntu-latest
    environment: development
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Install
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Set default common sst secrets
        run: |
          npx sst secrets --stage $PR_NAME set AUTH_CLIENT_SECRET ${{ secrets.AUTH_CLIENT_SECRET }}
          npx sst secrets --stage $PR_NAME set REGISTER_SECRET ${{ secrets.REGISTER_SECRET }}
      - name: Bootstrap
        run: npx lerna bootstrap
      - name: Build
        run: |
          npx lerna run build
          npx sst build --stage $PR_NAME
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
  lint:
    needs: [ "build" ]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: 'lint'
        run: yarn lint
  typecheck:
    needs: [ "build" ]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: 'typecheck'
        run: yarn typecheck
  deploy:
    needs: [ "lint", "typecheck" ]
    runs-on: ubuntu-latest
    environment: development
    env:
      COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Deploy infra
        run: |
          deploy_results=$(npx sst deploy --stage $PR_NAME)
      - name: Testeri
        run: echo ${{steps.deploy_results.outputs.deploy_results}}
  unit_test:
    needs: [ "deploy" ]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Unit test
        run: npx sst bind --stage $PR_NAME -- vitest run
      #  cypress-run:
      #    needs: [ "deploy" ]
      #    runs-on: ubuntu-latest
      #    environment: development
      #    # Runs tests in parallel with matrix strategy https://docs.cypress.io/guides/guides/parallelization
      #    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
      #    # Also see warning here https://github.com/cypress-io/github-action#parallel
      #    strategy:
      #      fail-fast: false # https://github.com/cypress-io/github-action/issues/48
      #      matrix:
      #        containers: [ 1, 2 ] # Uses 2 parallel instances
      #    steps:
      #      - uses: actions/cache@v3
      #        id: restore-build
      #        with:
      #          path: ./*
      #          key: ${{ github.sha }}
      #      - name: Cypress run
      #        # Uses the official Cypress GitHub action https://github.com/cypress-io/github-action
      #        uses: cypress-io/github-action@v4
      #        with:
      #          # Starts web server for E2E tests - replace with your own server invocation
      #          # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
      #          start: npm start
      #          wait-on: 'http://localhost:3000' # Waits for above
      #          # Records to Cypress Dashboard
      #          # https://docs.cypress.io/guides/dashboard/projects#Set-up-a-project-to-record
      #          record: true
      #          parallel: true # Runs test in parallel using settings above
      #        env:
      #          # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
      #          # in GitHub repo → Settings → Secrets → Actions
      #          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
      #          # Creating a token https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
      #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #          CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
      #          CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
      #          CYPRESS_USER_NICK: ${{ secrets.CYPRESS_USER_NICK }}




     
