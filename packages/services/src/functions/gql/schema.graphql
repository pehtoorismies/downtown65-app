scalar AWSDateTime

directive @aws_api_key on OBJECT | FIELD_DEFINITION
directive @aws_oidc on OBJECT

enum EventType {
    CYCLING
    KARONKKA
    MEETING
    NORDIC_WALKING
    ORIENTEERING
    OTHER
    RUNNING
    SKIING
    SPINNING
    SWIMMING
    TRACK_RUNNING
    TRAIL_RUNNING
    TRIATHLON
    ULTRAS
}

type Participant {
    joinedAt: AWSDateTime!
    nick: String!
}

type Event @aws_api_key @aws_oidc {
    dateStart: AWSDateTime!
    id: ID!
    race: Boolean!
    subtitle: String
    title: String!
    type: EventType!
    participants: [Participant!]!
}

interface Auth0User {
    id: ID!
    email: String!
    name: String!
    nickname: String
}

type User implements Auth0User @aws_api_key @aws_oidc {
    createdAt: AWSDateTime!
    email: String!
    id: ID!
    name: String!
    nickname: String
    preferences: Preferences!
    updatedAt: AWSDateTime
}

type BaseUser implements Auth0User{
    email: String!
    id: ID!
    name: String!
    nickname: String!
    picture: String!
}


input CreateEventInput {
    dateStart: AWSDateTime!
    race: Boolean
    subtitle: String
    title: String!
    type: String!
}

type AuthPayload @aws_api_key {
    accessToken: String!
    expiresIn: Int!
    idToken: String!
}

type Preferences {
    subscribeEventCreationEmail: Boolean!
    subscribeWeeklyEmail: Boolean!
}

type IDPayload {
    id: ID!
}

input UpdateEventInput {
    dateStart: AWSDateTime
    id: ID!
    race: Boolean
    subtitle: String
    title: String
    type: String
}

interface Error {
    message: String!
    path: String!
    code: String!
}

type LoginError implements Error @aws_api_key {
    message: String!
    path: String!
    code: String!
}

type LoginPayload @aws_api_key {
    tokens: AuthPayload
    loginError: LoginError
}

input PreferencesInput {
    subscribeEventCreationEmail: Boolean!
    subscribeWeeklyEmail: Boolean!
}

input SignupInput {
    email: String!
    nickname: String!
    password: String!
    name: String!
    registerSecret: String!
}

interface UserError {
    message: String!
    path: String!
}

enum SignupField {
    name
    password
    registerSecret
    nickname
    email
}

type FieldError @aws_api_key{
    message: String!
    path: SignupField!
}

type SignupPayload @aws_api_key {
    user: User
    errors: [FieldError!]
}

input UpdateMeInput {
    preferences: PreferencesInput!
}

type Query {
    event(eventId: ID!): Event @aws_api_key
    # Future events
    events: [Event!]!
    me: User!
    users: [BaseUser!]!
}

type Mutation {
    createEvent(
        event: CreateEventInput!
        addMe: Boolean = false
        notifySubscribers: Boolean = true
    ): Event!
    updateEvent(input: UpdateEventInput!): Event!
    deleteEvent(eventId: ID!): IDPayload
    leaveEvent(eventId: ID!): Boolean
    joinEvent(eventId: ID!): Boolean

    updateMe(input: UpdateMeInput!): User!

    login(
        email: String!
        password: String!
    ): LoginPayload! @aws_api_key

    signup(input: SignupInput!): SignupPayload! @aws_api_key

    forgotPassword(
        email: String!
    ): Boolean! @aws_api_key
}


