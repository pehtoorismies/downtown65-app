scalar AWSDateTime

directive @aws_api_key on OBJECT | FIELD_DEFINITION
directive @aws_oidc on OBJECT

enum EventType {
  KARONKKA
  MEETING
  NORDIC_WALKING
  ORIENTEERING
  OTHER
  RUNNING
  SKIING
  SPINNING
  SWIMMING
  TRACK_RUNNING
  TRAIL_RUNNING
  TRIATHLON
  ULTRAS
}

type Event {
  id: ID!
  title: String!
  subtitle: String
  type: EventType!
  race: Boolean!
  exactTime: Boolean @deprecated(reason: "exactTime is deprecated. Legacy.")
}

interface Auth0User {
  id: ID!
  email: String!
  name: String!
  nickname: String
}

type User implements Auth0User @aws_api_key @aws_oidc {
  id: ID!
  email: String!
  name: String!
  nickname: String
  preferences: Preferences!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime
}

type BaseUser implements Auth0User{
  id: ID!
  email: String!
  name: String!
  nickname: String!
  picture: String!
}


input EventData {
  title: String!
  subtitle: String
  race: Boolean
  type: String!
  date: String!
  exactTime: Boolean = false
}

type AuthPayload @aws_api_key {
  accessToken: String!
  idToken: String!
  expiresIn: String!
}

type Preferences {
  subscribeWeeklyEmail: Boolean!
  subscribeEventCreationEmail: Boolean!
}

type IDPayload {
  id: ID!
}

type Query {
  event(eventId: ID!): Event @aws_api_key
  # Future events
  events: [Event!]!
  me: User!
  users: [BaseUser!]!
  findEvent(eventId: ID!): Event @deprecated(reason: "findEvent is deprecated. Use event instead.")
  findManyEvents(limit: Int): [Event!]! @deprecated(reason: "findManyEvents is deprecated. Use events instead.")
}


type Mutation {
  createEvent(
    event: EventData!
    addMe: Boolean = false
    notifySubscribers: Boolean = true
  ): Event!

  login(
    email: String!
    password: String!
  ): AuthPayload! @aws_api_key

  signup(
    email: String!
    nickname: String!
    password: String!
    name: String!
    registerSecret: String!
  ): User! @aws_api_key

  forgotPassword(
    email: String!
  ): Boolean!

  deleteEvent(eventId: ID!): IDPayload

  leaveEvent(eventId: ID!): Event
  joinEvent(eventId: ID!): Event

}


