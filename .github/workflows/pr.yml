name: Pull Request

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PR_NAME: pr-${{ github.event.pull_request.id }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: eu-north-1
  AWS_REGION: eu-north-1

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  logging:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Print stage
        run: |
          echo Stage is $PR_NAME
          echo to remove: sst remove --stage $PR_NAME
  #  - name: restore lerna
  #    uses: actions/cache@v3
  #    with:
  #      path: '**/node_modules'
  #      key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
  build:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
      - name: Install
        run: yarn install --immutable --immutable-cache
      - name: Set default common sst secrets
        run: |
          npx sst secrets --stage $PR_NAME set AUTH_CLIENT_SECRET ${{ secrets.AUTH_CLIENT_SECRET }}
          npx sst secrets --stage $PR_NAME set REGISTER_SECRET ${{ secrets.REGISTER_SECRET }}
      - name: Bootstrap
        run: npx lerna bootstrap
      - name: Build
        run: |
          npx lerna run build --scope @downtown65-app/common
          npx sst build --stage $PR_NAME
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - uses: actions/cache@v3
        id: restore-cypress
        with:
          path: /home/runner/.cache/Cypress
          key: cypress12.3.0
  lint:
    runs-on: ubuntu-latest
    environment: development
    needs: [ "build" ]
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: 'lint'
        run: yarn lint
  typecheck:
    runs-on: ubuntu-latest
    environment: development
    needs: [ "build" ]
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: 'lint'
        run: yarn typecheck
  deploy:
    needs: [ "lint", "typecheck" ]
    runs-on: ubuntu-latest
    environment: development
    env:
      COOKIE_SECRET: ${{ secrets.COOKIE_SECRET }}
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Deploy infra
        run: npx sst deploy --stage $PR_NAME
  unit_test:
    needs: [ "deploy" ]
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Unit test
        run: npx sst bind --stage $PR_NAME -- vitest run
  playwright:
    needs: [ "deploy" ]
    timeout-minutes: 60
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(yarn info --json @playwright/test version | jq -r '.data')" >> $GITHUB_ENV
      - name: Cache playwright binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install Playwright Browsers
        working-directory: ./packages/frontend
        run: yarn playwright install --with-deps
      - name: Run Playwright tests
        working-directory: ./packages/frontend
        run: yarn playwright test
        env:
          BASE_URL: https://${{ env.PR_NAME }}.downtown65.events
  #      - uses: actions/upload-artifact@v3
  #        if: always()
  #        with:
  #          name: playwright-report
  #          path: playwright-report/
  #          retention-days: 30
  cypress-run:
    # disable
    if: github.repository == 'octo-org/octo-repo-prod'
    needs: [ "deploy" ]
    runs-on: ubuntu-latest
    environment: development
    # Runs tests in parallel with matrix strategy https://docs.cypress.io/guides/guides/parallelization
    # https://docs.github.com/en/actions/using-jobs/using-a-matrix-for-your-jobs
    # Also see warning here https://github.com/cypress-io/github-action#parallel
    strategy:
      fail-fast: false # https://github.com/cypress-io/github-action/issues/48
      matrix:
        containers: [ 1, 2 ] # Uses 2 parallel instances
    steps:
      - uses: actions/cache@v3
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}
      - uses: actions/cache@v3
        id: restore-cypress
        with:
          path: /home/runner/.cache/Cypress
          key: cypress12.3.0
      - name: Cypress run
        uses: cypress-io/github-action@v5.0.4
        with:
          browser: chrome
          project: ./packages/frontend
          spec: |
            ./packages/frontend/cypress/e2e/**/*.ts
          # Starts web server for E2E tests - replace with your own server invocation
          # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
          #          start: npm start
          #          wait-on: 'http://localhost:3000' # Waits for above
          # Records to Cypress Dashboard
          # https://docs.cypress.io/guides/dashboard/projects#Set-up-a-project-to-record
          record: true
          parallel: true # Runs test in parallel using settings above
          config: baseUrl=https://${{ env.PR_NAME }}.downtown65.events
        env:
          # For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
          # in GitHub repo → Settings → Secrets → Actions
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          # Creating a token https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
          #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_USER_EMAIL: ${{ secrets.CYPRESS_USER_EMAIL }}
          CYPRESS_USER_PASSWORD: ${{ secrets.CYPRESS_USER_PASSWORD }}
          CYPRESS_USER_NICK: ${{ secrets.CYPRESS_USER_NICK }}
